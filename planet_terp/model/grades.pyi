# coding: utf-8

"""
    PlanetTerp API

    Welcome to [PlanetTerp](https://planetterp.com)'s API. This API provides access to data relating to courses, professors, and grade data at UMD.  Base URL: https://planetterp.com/api/v1  The API does not require any authentication, but please be respectful and don't hammer it with too many requests without a pause. We have a [Python wrapper](https://github.com/planetterp/PlanetTerp-API-Python-Wrapper), and we've also written an [example program](https://gist.github.com/tybug/3fcebc8a2b63d471270bda86f0756cdf) in python if you want a step by step walkthrough.  If you want a more general UMD API, check out [umd.io](https://umd.io).  For support, please email us at the email above.  The course and professor data on this website was obtained using a combination of [umd.io](https://umd.io) and UMD's [Schedule of Classes](https://app.testudo.umd.edu/soc/). The grade data is from [IRPA](https://www.irpa.umd.edu) and obtained through a [PIA](https://www.umd.edu/administration/public-information-request) request.   # noqa: E501

    The version of the OpenAPI document: v1
    Contact: admin@planetterp.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from planet_terp import schemas  # noqa: F401


class Grades(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "A",
            "B",
            "C",
            "D",
            "F",
            "D+",
            "C+",
            "B+",
            "D-",
            "A+",
            "C-",
            "section",
            "B-",
            "A-",
            "professor",
            "W",
            "course",
            "semester",
            "Other",
        }
        
        class properties:
            course = schemas.StrSchema
            professor = schemas.StrSchema
            semester = schemas.StrSchema
            section = schemas.StrSchema
            a = schemas.IntSchema
            A = schemas.IntSchema
            a_ = schemas.IntSchema
            b = schemas.IntSchema
            B = schemas.IntSchema
            b_ = schemas.IntSchema
            c = schemas.IntSchema
            C = schemas.IntSchema
            c_ = schemas.IntSchema
            d = schemas.IntSchema
            D = schemas.IntSchema
            d_ = schemas.IntSchema
            F = schemas.IntSchema
            W = schemas.IntSchema
            Other = schemas.IntSchema
            __annotations__ = {
                "course": course,
                "professor": professor,
                "semester": semester,
                "section": section,
                "A+": a,
                "A": A,
                "A-": a_,
                "B+": b,
                "B": B,
                "B-": b_,
                "C+": c,
                "C": C,
                "C-": c_,
                "D+": d,
                "D": D,
                "D-": d_,
                "F": F,
                "W": W,
                "Other": Other,
            }
    
    A: MetaOapg.properties.A
    B: MetaOapg.properties.B
    C: MetaOapg.properties.C
    D: MetaOapg.properties.D
    F: MetaOapg.properties.F
    section: MetaOapg.properties.section
    professor: MetaOapg.properties.professor
    W: MetaOapg.properties.W
    course: MetaOapg.properties.course
    semester: MetaOapg.properties.semester
    Other: MetaOapg.properties.Other
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["course"]) -> MetaOapg.properties.course: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["professor"]) -> MetaOapg.properties.professor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["semester"]) -> MetaOapg.properties.semester: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["A+"]) -> MetaOapg.properties.a: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["A"]) -> MetaOapg.properties.A: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["A-"]) -> MetaOapg.properties.a_: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["B+"]) -> MetaOapg.properties.b: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["B"]) -> MetaOapg.properties.B: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["B-"]) -> MetaOapg.properties.b_: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["C+"]) -> MetaOapg.properties.c: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["C"]) -> MetaOapg.properties.C: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["C-"]) -> MetaOapg.properties.c_: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["D+"]) -> MetaOapg.properties.d: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["D"]) -> MetaOapg.properties.D: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["D-"]) -> MetaOapg.properties.d_: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["F"]) -> MetaOapg.properties.F: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["W"]) -> MetaOapg.properties.W: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Other"]) -> MetaOapg.properties.Other: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["course", "professor", "semester", "section", "A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "F", "W", "Other", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["course"]) -> MetaOapg.properties.course: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["professor"]) -> MetaOapg.properties.professor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["semester"]) -> MetaOapg.properties.semester: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["section"]) -> MetaOapg.properties.section: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["A+"]) -> MetaOapg.properties.a: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["A"]) -> MetaOapg.properties.A: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["A-"]) -> MetaOapg.properties.a_: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["B+"]) -> MetaOapg.properties.b: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["B"]) -> MetaOapg.properties.B: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["B-"]) -> MetaOapg.properties.b_: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["C+"]) -> MetaOapg.properties.c: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["C"]) -> MetaOapg.properties.C: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["C-"]) -> MetaOapg.properties.c_: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["D+"]) -> MetaOapg.properties.d: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["D"]) -> MetaOapg.properties.D: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["D-"]) -> MetaOapg.properties.d_: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["F"]) -> MetaOapg.properties.F: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["W"]) -> MetaOapg.properties.W: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Other"]) -> MetaOapg.properties.Other: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["course", "professor", "semester", "section", "A+", "A", "A-", "B+", "B", "B-", "C+", "C", "C-", "D+", "D", "D-", "F", "W", "Other", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        A: typing.Union[MetaOapg.properties.A, decimal.Decimal, int, ],
        B: typing.Union[MetaOapg.properties.B, decimal.Decimal, int, ],
        C: typing.Union[MetaOapg.properties.C, decimal.Decimal, int, ],
        D: typing.Union[MetaOapg.properties.D, decimal.Decimal, int, ],
        F: typing.Union[MetaOapg.properties.F, decimal.Decimal, int, ],
        section: typing.Union[MetaOapg.properties.section, str, ],
        professor: typing.Union[MetaOapg.properties.professor, str, ],
        W: typing.Union[MetaOapg.properties.W, decimal.Decimal, int, ],
        course: typing.Union[MetaOapg.properties.course, str, ],
        semester: typing.Union[MetaOapg.properties.semester, str, ],
        Other: typing.Union[MetaOapg.properties.Other, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Grades':
        return super().__new__(
            cls,
            *_args,
            A=A,
            B=B,
            C=C,
            D=D,
            F=F,
            section=section,
            professor=professor,
            W=W,
            course=course,
            semester=semester,
            Other=Other,
            _configuration=_configuration,
            **kwargs,
        )
